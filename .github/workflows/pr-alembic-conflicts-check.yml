name: pr-alembic-conflicts-check
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - edited
      - synchronize

jobs:
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Merge PR locally
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git rebase origin/${{ github.event.pull_request.base.ref }}

        git merge --no-commit --no-ff -m "xxx" ${{ github.event.pull_request.head.ref }} --allow-unrelated-histories

        git pull origin ${{ github.event.pull_request.head.ref }}
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git checkout origin/${{ github.event.pull_request.base.ref }}
        git checkout -b ${{ github.event.pull_request.base.ref }}
        git pull origin ${{ github.event.pull_request.base.ref }}
        git config user.email "you@example.com"
        git config user.name "Your Name"
        git merge --no-commit --no-ff -m "xxx" ${{ github.event.pull_request.head.ref }} --allow-unrelated-histories
        git diff
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    - name: install alembic dependency
      run: |
        pip install alembic
        python --version
    - name: Init alembic workdir
      working-directory: webapp/migrations/versions
      run: alembic init alembic
    - name: Extract pure revision info.
      working-directory: webapp/migrations/versions
      run: for f in *.py; do cat $f | grep revision > "alembic/versions/$f"; done
    - name: Check heads
      working-directory: webapp/migrations/versions
      run: |
        heads=$(alembic heads)
        echo "Get head(s): "
        echo $heads
        head_count=$(echo "$heads" | wc -l | awk '$1=$1')
        echo "Head count is:"
        echo $head_count
        if [ $head_count != "1" ]; then echo "There has multiple heads, please resolve by following \n\n https://github.com/UrbanCompass/glide-devapp/tree/development/.github/workflows#alembic-conflicts-check !"; echo $heads; exit 1; fi