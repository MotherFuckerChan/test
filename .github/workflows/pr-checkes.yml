name: Check Checks
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - edited
      - synchronize

jobs:
  branch-broken-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          version: 12
      - run: npm install @actions/github
      - run: npm install @actions/core
      - run: node .github/actions/block-merge-to-broken-branch.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: UrbanCompass/prchecker@main
        with:
          exempt-users: '["wei-hai-compass", "chengjunzhan", "ugodiggi", "mbenedettini", "marianolg", "nathandaonyc"]'
          check-items: '["body", "tasks"]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  alembic-conflicts-check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - name: Merge PR locally
      run: |
        git fetch origin
        git checkout ${GITHUB_BASE_REF}
        git config user.email "you@example.com"
        git config user.name "Your Name"
        git merge origin/${GITHUB_HEAD_REF}
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    - name: install alembic dependency
      run: |
        pip install alembic
        python --version
    - name: Init alembic workdir
      working-directory: webapp/migrations/versions
      run: alembic init alembic
    - name: Extract pure revision info.
      working-directory: webapp/migrations/versions
      run: for f in *.py; do cat $f | grep revision > "alembic/versions/$f"; done
    - name: Check heads
      working-directory: webapp/migrations/versions
      run: |
        heads=$(alembic heads)
        echo "Get head(s): "
        echo $heads
        head_count=$(echo "$heads" | wc -l | awk '$1=$1')
        echo "Head count is:"
        echo $head_count
        if [ $head_count != "1" ]; then echo "There has multiple heads, please resolve by following \n\n https://github.com/UrbanCompass/glide-devapp/tree/development/.github/workflows#alembic-conflicts-check !"; echo $heads; exit 1; fi

